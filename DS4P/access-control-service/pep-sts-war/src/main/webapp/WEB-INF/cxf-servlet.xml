<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:cxf="http://cxf.apache.org/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:sec="http://cxf.apache.org/configuration/security" xmlns:http="http://cxf.apache.org/transports/http/configuration"
	xmlns:httpj="http://cxf.apache.org/transports/http-jetty/configuration"
	xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xsi:schemaLocation="
http://cxf.apache.org/core  
http://cxf.apache.org/schemas/core.xsd             
http://cxf.apache.org/configuration/security             
http://cxf.apache.org/schemas/configuration/security.xsd             
http://cxf.apache.org/jaxws             
http://cxf.apache.org/schemas/jaxws.xsd            
http://cxf.apache.org/transports/http/configuration             
http://cxf.apache.org/schemas/configuration/http-conf.xsd             
http://cxf.apache.org/transports/http-jetty/configuration             
http://cxf.apache.org/schemas/configuration/http-jetty.xsd             
http://www.springframework.org/schema/beans             
http://www.springframework.org/schema/beans/spring-beans.xsd             
http://www.springframework.org/schema/util             
http://www.springframework.org/schema/util/spring-util.xsd
http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">

	<!-- This will automatically locate any and all property files you have within your classpath. 
	The located property files are parsed and their values can then be used within 
	application context files in the form of ${propertyKey}. -->
	<import resource="external-properties.xml"/>
	
	<bean id="transportSTSProviderBean"
		class="org.apache.cxf.ws.security.sts.provider.SecurityTokenServiceProvider">
		<property name="issueOperation" ref="transportIssueDelegate" />
		<property name="validateOperation" ref="transportValidateDelegate" />
	</bean>

	<!-- <bean id="utDelegationHandler" class="org.apache.cxf.sts.token.delegation.UsernameTokenDelegationHandler"/> -->

	<bean id="transportIssueDelegate" class="org.apache.cxf.sts.operation.TokenIssueOperation">
		<property name="tokenProviders" ref="transportTokenProviders" />
		<property name="services" ref="transportService" />
		<property name="stsProperties" ref="transportSTSProperties" />
		<!-- <property name="claimsManager" ref="claimsManager"/> -->
		<property name="tokenStore" ref="defaultTokenStore" />
		<!-- <property name="delegationHandlers" ref="utDelegationHandler"/> -->
	</bean>

	<bean id="transportValidateDelegate" class="org.apache.cxf.sts.operation.TokenValidateOperation">
		<property name="tokenProviders" ref="transportTokenProviders" />
		<property name="tokenValidators" ref="transportTokenValidators" />
		<property name="stsProperties" ref="transportSTSProperties" />
		<property name="tokenStore" ref="defaultTokenStore" />
	</bean>
	<bean id="defaultTokenStore" class="org.apache.cxf.sts.cache.DefaultInMemoryTokenStore"></bean>

	<util:list id="transportTokenProviders">
		<ref bean="transportSamlTokenProvider" />
	</util:list>
	<util:list id="transportTokenValidators">
		<ref bean="transportSamlTokenValidator" />
		<ref bean="transportX509TokenValidator" />
		<ref bean="transportUsernameTokenValidator" />
		<!-- <ref bean="transportCustomBSTTokenValidator"/> -->
	</util:list>

	<bean id="transportSamlTokenProvider" class="org.apache.cxf.sts.token.provider.SAMLTokenProvider">
		<property name="attributeStatementProviders" ref="attributeStatementProvidersList" />
	</bean>

	<util:list id="attributeStatementProvidersList">
		<ref bean="defaultAttributeProvider" />
		<ref bean="customAttributeProvider" />
	</util:list>

	<bean id="defaultAttributeProvider" class="org.apache.cxf.sts.token.provider.DefaultAttributeStatementProvider"></bean>
	<bean id="customAttributeProvider" class="gov.samhsa.acs.pep.sts.CustomAttributeStatementProvider"></bean>
	<bean id="claimsManager" class="org.apache.cxf.sts.claims.ClaimsManager"></bean>
	<bean id="transportX509TokenValidator" class="org.apache.cxf.sts.token.validator.X509TokenValidator"></bean>
	<bean id="transportUsernameTokenValidator" class="org.apache.cxf.sts.token.validator.UsernameTokenValidator"></bean>
	<bean id="transportSamlTokenValidator" class="org.apache.cxf.sts.token.validator.SAMLTokenValidator"></bean>
	<bean id="transportService" class="gov.samhsa.acs.pep.sts.DynamicService" autowire="constructor">
		<property name="endpoints" ref="transportEndpoints" />
	</bean>

	<util:list id="transportEndpoints">
		<value>${pepServiceProviderAddress}</value>
		<value>${pepServiceTransportProviderAddress}</value>
	</util:list>

	<bean id="encryptionNameProvider" class="gov.samhsa.acs.pep.sts.EncryptionNameProviderImpl">
		<property name="serviceProviderAddressPatternMap" ref="serviceProviderAddressMap"></property>
	</bean>

	<util:map id="serviceProviderAddressMap" value-type="java.lang.String">
		<!-- Map between String key and List -->
		<entry key="${pepServiceProviderAddress}"
			value="myservicekey" />
		<entry key="${pepServiceTransportProviderAddress}"
			value="unknown" />
	</util:map>

	<bean id="transportSTSProperties" class="org.apache.cxf.sts.StaticSTSProperties">
		<property name="signaturePropertiesFile" value="stsKeystore.properties" />
		<property name="signatureUsername" value="mystskey" />
		<property name="callbackHandlerClass" value="gov.samhsa.acs.pep.sts.PasswordCallbackHandler" />
		<property name="encryptionPropertiesFile" value="stsKeystore.properties" />
		<property name="issuer" value="PepSTSIssuer" />
		<!-- encryptionUsername configuration will be override by DynamicService -->
		<property name="encryptionUsername" value="whatever" />
	</bean>

	<jaxws:endpoint id="CXFSTS" implementor="#transportSTSProviderBean"
		address="/STS" wsdlLocation="/WEB-INF/wsdl/PepSTSService.wsdl"
		xmlns:ns1="http://docs.oasis-open.org/ws-sx/ws-trust/200512/"
		serviceName="ns1:SecurityTokenService" endpointName="ns1:STS_Port">
		<jaxws:properties>
			<entry key="ws-security.callback-handler" value="gov.samhsa.acs.pep.sts.PasswordCallbackHandler" />
			<entry key="ws-security.signature.properties" value="stsKeystore.properties" />
			<entry key="ws-security.signature.username" value="mystskey" />
			<!-- Below unused/unneeded if using UT auth between WSC and STS -->
			<entry key="ws-security.encryption.username" value="useReqSigCert" />
			<!-- Uncomment below only if (1) using UT auth *and* (2) Metro clients -->
			<!-- Needed due to lack of TokenType param (Metro bugs WSIT-1324 and WSIT-1570) -->
			<!--entry key="ws-security.is-bsp-compliant" value="false"/ -->
		</jaxws:properties>
	</jaxws:endpoint>

	<bean id="cxfLoggingConfigurer"
		class="gov.samhsa.acs.common.cxf.CXFLoggingConfigurer"
		autowire="constructor">
		<!-- set this property to enable/disable CXF Logging Interceptors, -->
		<!-- or use loggerCheckController RESTful API to change this configuration at runtime. -->
		<!--<property name="enableLoggingInterceptors" value="true" />-->
	</bean>

	<bean id="loggerCheckController" class="gov.samhsa.acs.pep.sts.rs.instrumentation.LoggerCheckController"
		autowire="constructor">
		<constructor-arg index="0" value="${instrumentationKey}" />  
	</bean>
	
	<jaxrs:server id="loggerCheckService" address="/services">
		<jaxrs:serviceBeans>  
			<ref bean="loggerCheckController" />  
		</jaxrs:serviceBeans> 
	</jaxrs:server> 

</beans>

