<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:cxf="http://cxf.apache.org/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:sec="http://cxf.apache.org/configuration/security" xmlns:http="http://cxf.apache.org/transports/http/configuration"
	xmlns:httpj="http://cxf.apache.org/transports/http-jetty/configuration"
	xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
http://cxf.apache.org/core  
http://cxf.apache.org/schemas/core.xsd             
http://cxf.apache.org/configuration/security             
http://cxf.apache.org/schemas/configuration/security.xsd             
http://cxf.apache.org/jaxws             
http://cxf.apache.org/schemas/jaxws.xsd            
http://cxf.apache.org/transports/http/configuration             
http://cxf.apache.org/schemas/configuration/http-conf.xsd             
http://cxf.apache.org/transports/http-jetty/configuration             
http://cxf.apache.org/schemas/configuration/http-jetty.xsd             
http://www.springframework.org/schema/beans             
http://www.springframework.org/schema/beans/spring-beans.xsd             
http://www.springframework.org/schema/util             
http://www.springframework.org/schema/util/spring-util-2.0.xsd">

	<!-- This will automatically locate any and all property files you have within your classpath. 
	The located property files are parsed and their values can then be used within 
	application context files in the form of ${propertyKey}. -->
	<import resource="external-properties.xml"/>
 	
    <jaxws:client name="{http://www.samhsa.gov/ds4ppilot/contract/pep}XDS_HTTP_Endpoint" createdFromAPI="true">
        <jaxws:properties>
            <!-- Use below for UT Authentication between WSC and STS -->
            <entry key="ws-security.sts.client">
            <!-- Add ".sct" if using WS-SecureConversation between WSC and WSP. -->
            <!--entry key="ws-security.sts.client.sct"-->
                <bean class="org.apache.cxf.ws.security.trust.STSClient">
                    <constructor-arg ref="cxf" />
                    <property name="wsdlLocation" value="${issuer}" />
                    <property name="serviceName" value="{http://docs.oasis-open.org/ws-sx/ws-trust/200512/}SecurityTokenService" />
                    <property name="endpointName" value="{http://docs.oasis-open.org/ws-sx/ws-trust/200512/}STS_Port" />
                    <property name="properties">
                        <map>
                            <entry key="ws-security.username" value="alice" />
                            <entry key="ws-security.callback-handler" value="gov.samhsa.acs.pep.wsclient.ClientCallbackHandler" />
                            <entry key="ws-security.encryption.properties" value="clientKeystore.properties" />
                            <entry key="ws-security.encryption.username" value="mystskey" />
                        </map>
                    </property>
                </bean>
            </entry>
            
            <!-- Below line needed only when accessing a Metro STS *and* w/UT auth due to 
                 lack of TokenType param (Metro bugs WSIT-1324 and WSIT-1570) -->
            <!--entry key="ws-security.is-bsp-compliant" value="false"/-->
            <!-- Use below for X.509 Authentication between WSC and STS -->
            <!--entry key="ws-security.sts.client"-->
            <!-- Add ".sct" if using WS-SecureConversation between WSC and WSP. -->
            <!--entry key="ws-security.sts.client.sct">
                <bean class="org.apache.cxf.ws.security.trust.STSClient">
                    <constructor-arg ref="cxf" />
                    <property name="wsdlLocation" value="http://localhost:8080/PepSTS/STS?wsdl" />
                    <property name="serviceName" value="{http://docs.oasis-open.org/ws-sx/ws-trust/200512/}SecurityTokenService" />
                    <property name="endpointName" value="{http://docs.oasis-open.org/ws-sx/ws-trust/200512/}STS_Port" />
                    <property name="properties">
                        <map>
                            <entry key="ws-security.signature.username" value="myclientkey" />
                            <entry key="ws-security.callback-handler" value="gov.samhsa.acs.pep.wsclient.ClientCallbackHandler" />
                            <entry key="ws-security.signature.properties" value="clientKeystore.properties" />
                            <entry key="ws-security.encryption.properties" value="clientKeystore.properties" />
                            <entry key="ws-security.encryption.username" value="mystskey" />
                        </map>
                    </property>
                </bean>
            </entry-->
        </jaxws:properties>
    </jaxws:client>

</beans>


