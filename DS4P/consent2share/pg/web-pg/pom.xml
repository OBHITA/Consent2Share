<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>gov.samhsa.consent2share</groupId>
		<artifactId>consent2share-pg</artifactId>
		<version>2.6.0-SNAPSHOT</version>
	</parent>

	<artifactId>consent2share-web-pg</artifactId>
	<packaging>war</packaging>
	<name>consent2share web for pg</name>

	<dependencies>

		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aspects</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
		</dependency>

		<!-- Spring security -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-taglibs</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-aspects</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.webflow</groupId>
			<artifactId>spring-webflow</artifactId>
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Jasypt -->
		<dependency>
			<groupId>org.jasypt</groupId>
			<artifactId>jasypt-spring31</artifactId>
		</dependency>

		<!-- Spring web -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
		</dependency>

		<!-- Thymeleaf -->
		<dependency>
			<groupId>org.thymeleaf</groupId>
			<artifactId>thymeleaf</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.thymeleaf</groupId>
			<artifactId>thymeleaf-spring4</artifactId>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.thymeleaf.extras</groupId>
			<artifactId>thymeleaf-extras-springsecurity3</artifactId>
			<scope>compile</scope>
		</dependency>

		<!-- Persistence -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
		</dependency>

		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>

		<!-- Adobe Echosign -->
		<dependency>
			<groupId>com.echosign</groupId>
			<artifactId>adobe-echosign</artifactId>
		</dependency>

		<!-- Other dependencies -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-dbcp2</artifactId>
		</dependency>
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
		</dependency>
		<dependency>
			<groupId>net.sf.jasperreports</groupId>
			<artifactId>jasperreports-fonts</artifactId>
		</dependency>

		<!-- Test -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
		</dependency>
		<dependency>
			<groupId>gov.samhsa.consent2share</groupId>
			<artifactId>common-unit</artifactId>
		</dependency>

		<!-- Selenium -->
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<exclusions>
				<exclusion>
					<artifactId>commons-collections</artifactId>
					<groupId>commons-collections</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-firefox-driver</artifactId>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-server</artifactId>
		</dependency>

		<!-- Our own projects Start -->
		<dependency>
			<groupId>gov.samhsa.consent</groupId>
			<artifactId>consent-gen-pg</artifactId>
		</dependency>
		<dependency>
			<groupId>gov.samhsa.consent2share</groupId>
			<artifactId>consent2share-service-pg</artifactId>
		</dependency>
		<!-- Our own projects End -->
		
	</dependencies>

	<build>
		<finalName>consent2share-pg</finalName>

		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.properties</include>
					<include>**/Consent2share_PCM/logback-audit.xml</include>
				</includes>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
			</resource>
		</resources>

		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>**/*.properties</include>
				</includes>
			</testResource>
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>false</filtering>
				<excludes>
					<exclude>**/*.properties</exclude>
				</excludes>
			</testResource>
		</testResources>

		<plugins>
			<plugin>
				<groupId>com.github.eirslett</groupId>
				<artifactId>frontend-maven-plugin</artifactId>

				<!-- optional -->
				<!-- <configuration> <workingDirectory>src/main/frontend</workingDirectory>
					</configuration> -->

				<executions>
					<execution>
						<!-- optional: you don't really need execution ids, but it looks nice
							in your build log. -->
						<id>install node and npm</id>
						<goals>
							<goal>install-node-and-npm</goal>
						</goals>
						<!-- optional: default phase is "generate-resources" -->
						<phase>generate-resources</phase>
						<configuration>
							<nodeVersion>v${node.version}</nodeVersion>
							<npmVersion>${npm.version}</npmVersion>
							<!-- optional: where to download node and npm from. Defaults to http://nodejs.org/dist/ -->
							<!-- <downloadRoot>http://nodejs.org/dist/</downloadRoot> -->
							<!-- You can also specify separate download roots for npm and node
								as they are now stored in separate repos -->
							<nodeDownloadRoot>http://nodejs.org/dist/</nodeDownloadRoot>
							<npmDownloadRoot>http://nodejs.org/dist/npm/</npmDownloadRoot>
						</configuration>
					</execution>

					<execution>
						<id>npm install</id>
						<goals>
							<goal>npm</goal>
						</goals>

						<!-- optional: default phase is "generate-resources" -->
						<phase>generate-resources</phase>

						<configuration>
							<!-- optional: The default argument is actually "install", so unless
								you need to run some other npm command, you can remove this whole <configuration>
								section. -->
							<arguments>install</arguments>
						</configuration>
					</execution>

					<execution>
						<id>grunt build</id>
						<goals>
							<goal>grunt</goal>
						</goals>

						<!-- optional: the default phase is "generate-resources" -->
						<phase>generate-resources</phase>

						<configuration>
							<!-- optional: if not specified, it will run Grunt's default task
								(and you can remove this whole <configuration> section.) -->
							<arguments>less</arguments>
							<!-- srcdir (optional, for M2Eclipse integration) - a directory to check for changed files before executing in an incremental build -->
							<!-- The changed file checking only occurs during an incremental build when using M2Eclipse. In any other environment those options are ignored and builds are always run. -->
							<!-- <srcdir>${basedir}/src/main/frontend</srcdir> -->
							<srcdir>${basedir}/src/main/frontend</srcdir>
						</configuration>
					</execution>

				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<!-- To include selenium test: mvn clean install -Pselenium-test -->
		<profile>
			<id>selenium-test</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>sql-maven-plugin</artifactId>
						<!-- These dependencies do not care dependencies in non-profile dependencyManagement -->
						<dependencies>
							<!-- specify the dependent jdbc driver here -->
							<dependency>
								<groupId>mysql</groupId>
								<artifactId>mysql-connector-java</artifactId>
								<version>${mysql-connector.version}</version>
							</dependency>
						</dependencies>

						<configuration>
							<driver>com.mysql.jdbc.Driver</driver>
							<url>${maven.database.url.pg}</url>
							<username>${maven.database.username.pg}</username>
							<password>${maven.database.password.pg}</password>
							<!-- You can comment out username/password configurations and have
								maven to look them up in your settings.xml using ${settingsKey} -->
							<settingsKey>sensibleKey</settingsKey>
							<!-- sql-maven-plugin which skip the execution for projects of packaging
								type 'pom' as default behaviour. It is same a few plugins like the source
								and javadoc plugin (amongst others) -->
							<forceMojoExecution>true</forceMojoExecution>
						</configuration>

						<executions>
							<execution>
								<id>drop-db-if-any</id>
								<phase>package</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<!-- need another database to drop the targeted one -->
									<url>${maven.database-deployment-helper.url.pg}</url>
									<username>${maven.database-deployment-helper.username.pg}</username>
									<password>${maven.database-deployment-helper.password.pg}</password>
									<autocommit>true</autocommit>
									<sqlCommand>drop database consent2share</sqlCommand>
									<!-- ignore error when database is not avaiable -->
									<onError>continue</onError>
								</configuration>
							</execution>

							<execution>
								<id>create-db</id>
								<phase>package</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<!-- need another database to create the targeted one -->
									<url>${maven.database-deployment-helper.url.pg}</url>
									<username>${maven.database-deployment-helper.username.pg}</username>
									<password>${maven.database-deployment-helper.password.pg}</password>
									<!-- no transaction -->
									<autocommit>true</autocommit>
									<sqlCommand>create database consent2share</sqlCommand>
								</configuration>
							</execution>

						</executions>
					</plugin>

					<plugin>
						<groupId>org.apache.tomcat.maven</groupId>
						<artifactId>tomcat7-maven-plugin</artifactId>

						<configuration>
							<path>/consent2share</path>
							<contextFile>${basedir}/src/main/resources/META-INF/spring/seleniumContext.xml</contextFile>
							<keystoreFile>C:/consent2share.keystore</keystoreFile>
							<keystorePass>changeit</keystorePass>
							<useTestClasspath>true</useTestClasspath>
						</configuration>
						<executions>
							<!-- At pre-integration-test phase, run the war in an embedded Tomcat
								server. -->
							<execution>
								<id>start-tomcat</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>run-war-only</goal>
								</goals>
								<configuration>
									<httpsPort>8444</httpsPort>
									<port>8081</port>
									<fork>true</fork>
								</configuration>
							</execution>
							<!-- At post-integration-test phase, stop the embedded Tomcat server. -->
							<execution>
								<id>stop-tomcat</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>shutdown</goal>
								</goals>
							</execution>
						</executions>
						<dependencies>
							<!-- Used to allow embedded Tomcat to connect to a MySQL database -->
							<dependency>
								<groupId>mysql</groupId>
								<artifactId>mysql-connector-java</artifactId>
								<version>${mysql-connector.version}</version>
							</dependency>
						</dependencies>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<executions>
							<execution>
								<id>verify</id>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<includes>
								<include>**/selenium/*.java</include>
							</includes>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

	</profiles>
</project>
