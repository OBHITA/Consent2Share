<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	   		http://www.springframework.org/schema/context
	   		http://www.springframework.org/schema/context/spring-context-3.0.xsd
			http://www.springframework.org/schema/mvc 
			http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<import resource="applicationContext-dataAccess.xml" />
	<import resource="applicationContext-jpa.xml" />
	<import resource="spring-integration-context.xml" />
	<import resource="rabbit-context.xml" />

	<context:property-placeholder location="classpath*:META-INF/spring/*.properties" />

	<!-- Activates various annotations to be detected in bean classes -->
	<context:annotation-config />

	<!-- Scans the classpath for annotated components that will be auto-registered 
		as Spring beans. For example @Controller and @Service. Make sure to set the 
		correct base-package -->
	<context:component-scan
		base-package="gov.samhsa.consent2share.domain, gov.samhsa.consent2share.infrastructure, gov.samhsa.consent2share.esignaturepolling, gov.samhsa.consent2share.si">
		<context:exclude-filter type="assignable"
			expression="gov.samhsa.consent2share.infrastructure.security.UserContext" />
	</context:component-scan>

	<bean class="org.springframework.mail.javamail.JavaMailSenderImpl"
		id="mailSender">
		<property name="host" value="${email.host}" />
		<property name="protocol" value="${email.protocol}" />
		<property name="port" value="${email.port}" />
		<property name="username" value="${email.username}" />
		<property name="password" value="${email.password}" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.starttls.enable">true</prop>
			</props>
		</property>
	</bean>

	<!-- THYMELEAF: Template Resolver for email templates -->
	<bean id="emailTemplateResolver"
		class="org.thymeleaf.templateresolver.ClassLoaderTemplateResolver">
		<property name="prefix" value="META-INF/email/" />
		<property name="templateMode" value="HTML5" />
		<property name="characterEncoding" value="UTF-8" />
		<property name="order" value="1" />
		<!-- Template cache is true by default. Set to false if you want -->
		<!-- templates to be automatically updated when modified. -->
		<property name="cacheable" value="false" />
	</bean>

	<!-- Declare a Thymeleaf resolver -->
	<bean id="templateResolver"
		class="org.thymeleaf.templateresolver.ServletContextTemplateResolver">
		<property name="prefix" value="/WEB-INF/" />
		<property name="suffix" value=".html" />
		<property name="templateMode" value="HTML5" />
		<property name="order" value="2" />
		<property name="cacheable" value="false" />
	</bean>

	<bean id="templateEngine" class="org.thymeleaf.spring3.SpringTemplateEngine">
		<property name="templateResolvers">
			<set>
				<ref bean="emailTemplateResolver" />
				<ref bean="templateResolver" />
			</set>
		</property>
		<property name="additionalDialects">
			<set>
				<bean
					class="org.thymeleaf.extras.springsecurity3.dialect.SpringSecurityDialect" />
			</set>
		</property>
	</bean>

	<bean autowire="byType"
		class="gov.samhsa.consent2share.service.consentexport.ConsentExportServiceImpl"
		id="consentExportService">
	</bean>

	<bean id="modelMapper" class="org.modelmapper.ModelMapper" scope="singleton"/>

	<!-- Configures the annotation-driven Spring MVC Controller programming 
		model. Note that, with Spring 3.0, this tag works in Servlet MVC only! -->
	<mvc:annotation-driven />
</beans>
